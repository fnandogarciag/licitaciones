services:
  # === PostgreSQL Database ===
  postgres_db:
    image: postgres:16
    container_name: postgres_db
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      retries: 5

  # === Backend (Next.js API) ===
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    restart: always
    env_file: .env
    environment:
      NODE_ENV: production
      DB_HOST: postgres_db
    ports:
      - '${BACKEND_PORT}:3001'
    depends_on:
      postgres_db:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3001/api/health || exit 1']
      interval: 10s
      retries: 5

  # === Frontend (Next.js App) ===
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        NEXT_PUBLIC_BACKEND_URL: 'http://backend:${BACKEND_PORT}'
    container_name: frontend
    restart: always
    env_file: .env
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_BACKEND_URL: http://backend:${BACKEND_PORT}
    ports:
      - '${FRONTEND_PORT}:3000'
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:
